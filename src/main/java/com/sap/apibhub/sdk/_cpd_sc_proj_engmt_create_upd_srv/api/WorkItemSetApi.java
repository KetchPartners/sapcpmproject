/*
 * Create and Update Commercial Projects
 * This service enables you to create and  update commercial projects in a SAP  S/4HANA Cloud system. For example, you  can use this service to create a customer  or internal project based on an  opportunity or a quotation. 
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk._cpd_sc_proj_engmt_create_upd_srv.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk._cpd_sc_proj_engmt_create_upd_srv.model.CPDSCPROJENGMTCREATEUPDSRVWorkItem;
import com.sap.apibhub.sdk._cpd_sc_proj_engmt_create_upd_srv.model.CreatedWorkItem;
import com.sap.apibhub.sdk._cpd_sc_proj_engmt_create_upd_srv.model.OdataError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkItemSetApi {
    private ApiClient apiClient;

    public WorkItemSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkItemSetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for workItemSetPost */
    private com.squareup.okhttp.Call workItemSetPostCall(CPDSCPROJENGMTCREATEUPDSRVWorkItem workItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = workItem;
        
        // create path and map variables
        String localVarPath = "/WorkItemSet".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workItemSetPostValidateBeforeCall(CPDSCPROJENGMTCREATEUPDSRVWorkItem workItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = workItemSetPostCall(workItem, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to WorkItemSet
     * 
     * @param workItem New entity (optional)
     * @return CreatedWorkItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedWorkItem workItemSetPost(CPDSCPROJENGMTCREATEUPDSRVWorkItem workItem) throws ApiException {
        ApiResponse<CreatedWorkItem> resp = workItemSetPostWithHttpInfo(workItem);
        return resp.getData();
    }

    /**
     * Add new entity to WorkItemSet
     * 
     * @param workItem New entity (optional)
     * @return ApiResponse&lt;CreatedWorkItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedWorkItem> workItemSetPostWithHttpInfo(CPDSCPROJENGMTCREATEUPDSRVWorkItem workItem) throws ApiException {
        com.squareup.okhttp.Call call = workItemSetPostValidateBeforeCall(workItem, null, null);
        Type localVarReturnType = new TypeToken<CreatedWorkItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to WorkItemSet (asynchronously)
     * 
     * @param workItem New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workItemSetPostAsync(CPDSCPROJENGMTCREATEUPDSRVWorkItem workItem, final ApiCallback<CreatedWorkItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workItemSetPostValidateBeforeCall(workItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedWorkItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDelete */
    private com.squareup.okhttp.Call workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteCall(String projectID, String workitem, String workPackageID, String workPackageName, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/WorkItemSet(ProjectID='{ProjectID}',Workitem='{Workitem}',WorkPackageID='{WorkPackageID}',WorkPackageName='{WorkPackageName}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "ProjectID" + "\\}", apiClient.escapeString(projectID.toString()))
        .replaceAll("\\{" + "Workitem" + "\\}", apiClient.escapeString(workitem.toString()))
        .replaceAll("\\{" + "WorkPackageID" + "\\}", apiClient.escapeString(workPackageID.toString()))
        .replaceAll("\\{" + "WorkPackageName" + "\\}", apiClient.escapeString(workPackageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteValidateBeforeCall(String projectID, String workitem, String workPackageID, String workPackageName, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectID' is set
        if (projectID == null) {
            throw new ApiException("Missing the required parameter 'projectID' when calling workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDelete(Async)");
        }
        
        // verify the required parameter 'workitem' is set
        if (workitem == null) {
            throw new ApiException("Missing the required parameter 'workitem' when calling workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDelete(Async)");
        }
        
        // verify the required parameter 'workPackageID' is set
        if (workPackageID == null) {
            throw new ApiException("Missing the required parameter 'workPackageID' when calling workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDelete(Async)");
        }
        
        // verify the required parameter 'workPackageName' is set
        if (workPackageName == null) {
            throw new ApiException("Missing the required parameter 'workPackageName' when calling workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteCall(projectID, workitem, workPackageID, workPackageName, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete entity from WorkItemSet
     * 
     * @param projectID Commercial Project ID   Identifies a master project. (required)
     * @param workitem Work Item ID (required)
     * @param workPackageID Plan Item (required)
     * @param workPackageName Plan Item Description (required)
     * @param ifMatch ETag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDelete(String projectID, String workitem, String workPackageID, String workPackageName, String ifMatch) throws ApiException {
        workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteWithHttpInfo(projectID, workitem, workPackageID, workPackageName, ifMatch);
    }

    /**
     * Delete entity from WorkItemSet
     * 
     * @param projectID Commercial Project ID   Identifies a master project. (required)
     * @param workitem Work Item ID (required)
     * @param workPackageID Plan Item (required)
     * @param workPackageName Plan Item Description (required)
     * @param ifMatch ETag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteWithHttpInfo(String projectID, String workitem, String workPackageID, String workPackageName, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteValidateBeforeCall(projectID, workitem, workPackageID, workPackageName, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete entity from WorkItemSet (asynchronously)
     * 
     * @param projectID Commercial Project ID   Identifies a master project. (required)
     * @param workitem Work Item ID (required)
     * @param workPackageID Plan Item (required)
     * @param workPackageName Plan Item Description (required)
     * @param ifMatch ETag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteAsync(String projectID, String workitem, String workPackageID, String workPackageName, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workItemSetProjectIDProjectIDWorkitemWorkitemWorkPackageIDWorkPackageIDWorkPackageNameWorkPackageNameDeleteValidateBeforeCall(projectID, workitem, workPackageID, workPackageName, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
